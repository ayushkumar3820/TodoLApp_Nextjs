{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/m/Desktop/TodoLApp_Nextjs/lib/database.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst DB_URL='mongodb://localhost:27017/todo';\r\n\r\n\r\nexport const connectDb=async()=>{\r\n    try{\r\n        if(mongoose.connection.readyState === 1){console.log(\"Already connected!\")\r\n            return ;\r\n        }\r\n        // await mongoose.connection(DB_URL,{\r\n        //     dbName:\"todoApp\"\r\n        // })\r\n        console.log(\"readystate are connected\",mongoose.connection.readyState);\r\n        await mongoose.connect(DB_URL);\r\n        console.log(\"Datat base are connected\")\r\n                console.log(\"readystate are connected\",mongoose.connection.readyState);\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n        console.log(\"Database are not connected\");\r\n        process.exit(1);        \r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAO;AAGN,MAAM,YAAU;IACnB,IAAG;QACC,IAAG,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAE;YAAC,QAAQ,GAAG,CAAC;YACjD;QACJ;QACA,qCAAqC;QACrC,uBAAuB;QACvB,KAAK;QACL,QAAQ,GAAG,CAAC,4BAA2B,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU;QACrE,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;QACJ,QAAQ,GAAG,CAAC,4BAA2B,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU;IAEjF,EACA,OAAM,KAAI;QACN,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;QACZ,QAAQ,IAAI,CAAC;IACjB;AACJ","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/m/Desktop/TodoLApp_Nextjs/model/todoModel.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n const Todo=mongoose.models.Todo ||  mongoose.model('Todo',{\r\n    text:{\r\n        type:string,\r\n        required:true\r\n    },\r\n    completed:{\r\n         type:Boolean,\r\n         default:false,\r\n         required:true\r\n    }\r\n})\r\n\r\n\r\nexport default Todo;"],"names":[],"mappings":";;;AAAA;;AAEC,MAAM,OAAK,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAK,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAO;IACvD,MAAK;QACD,MAAK;QACL,UAAS;IACb;IACA,WAAU;QACL,MAAK;QACL,SAAQ;QACR,UAAS;IACd;AACJ;uCAGe","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/m/Desktop/TodoLApp_Nextjs/app/todos/route.js"],"sourcesContent":["import { readFile, writeFile } from \"node:fs/promises\";\r\nimport todos from \"../../todos\";\r\nimport { connectDb } from \"@/lib/database\";\r\nimport mongoose from \"mongoose\";\r\nimport Todo from \"@/model/todoModel\";\r\n// import db from \"../../lib/database\";\r\n\r\n\r\n\r\n\r\nexport async function GET() {\r\n  await connectDb();\r\n  // const result=await db.collection(\"users\").insertOne({name:\"Ram\"});\r\n  // console.log(result);\r\n  // console.log(\"object\");\r\n\r\n  // const result =await mongoose.connection.db.collection(\"users\").insertMany({title:\"learn next js \"})\r\n\r\n  // console.log(result);\r\n\r\n\r\n  // const newTodo=await Todo.create({\r\n  //   text:\"Learn javascript\",\r\n  // })\r\n\r\n  // console.log(newTodo);\r\n  // console.log(\"object\");\r\n  // // const result=await Todo.find();\r\n  // // console.log(result);\r\n\r\n\r\n  const newTodo= await Todo.find();\r\n\r\n  // console.log(newTodo);\r\n\r\n  console.log(newTodo.map((id)));\r\n\r\n  // return Response.json(newTodo);\r\n  return Response.json(({id,text,completed})=>({id,text,completed}))\r\n\r\n\r\n  const todoJSONString = await readFile(\"./todos.json\", \"utf-8\");\r\n  const todos = JSON.parse(todoJSONString);\r\n  return Response.json(todos);\r\n}\r\n\r\nexport async function POST(request) {\r\n  await connectDb();\r\n  const todo = await request.json();\r\n  // const newTodo = {\r\n  //   id: crypto.randomUUID(),\r\n  //   text: todo.text,\r\n  //   completed: false,\r\n  // };\r\n\r\n  const {id,text,completed}=await Todo.create({text:todo.text})\r\n\r\n  todos.push(newTodo);\r\n  await writeFile(\"todos.json\", JSON.stringify(todos, null, 2));\r\n  // return Response.json(newTodo, {\r\n  //   status: 201,\r\n  // });\r\n\r\n  return Response.json(id,text,completed,{\r\n    status:201\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMO,eAAe;IACpB,MAAM,CAAA,GAAA,iHAAA,CAAA,YAAS,AAAD;IACd,qEAAqE;IACrE,uBAAuB;IACvB,yBAAyB;IAEzB,sGAAsG;IAEtG,uBAAuB;IAGvB,oCAAoC;IACpC,6BAA6B;IAC7B,KAAK;IAEL,wBAAwB;IACxB,yBAAyB;IACzB,qCAAqC;IACrC,0BAA0B;IAG1B,MAAM,WAAS,MAAM,oHAAA,CAAA,UAAI,CAAC,IAAI;IAE9B,wBAAwB;IAExB,QAAQ,GAAG,CAAC,SAAQ,GAAG,CAAE;IAEzB,iCAAiC;IACjC,OAAO,SAAS,IAAI,CAAC,CAAC,EAAC,IAAA,GAAE,EAAC,IAAI,EAAC,SAAS,EAAC,GAAG,CAAC;YAAC,IAAA;YAAG;YAAK;QAAS,CAAC;;IAGhE,MAAM;IACN,MAAM;AAER;AAEO,eAAe,KAAK,OAAO;IAChC,MAAM,CAAA,GAAA,iHAAA,CAAA,YAAS,AAAD;IACd,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,oBAAoB;IACpB,6BAA6B;IAC7B,qBAAqB;IACrB,sBAAsB;IACtB,KAAK;IAEL,MAAM,EAAC,IAAA,GAAE,EAAC,IAAI,EAAC,SAAS,EAAC,GAAC,MAAM,oHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;QAAC,MAAK,KAAK,IAAI;IAAA;IAE3D,6EAAA,CAAA,UAAK,CAAC,IAAI,CAAC;IACX,MAAM,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD,EAAE,cAAc,KAAK,SAAS,CAAC,6EAAA,CAAA,UAAK,EAAE,MAAM;IAC1D,kCAAkC;IAClC,iBAAiB;IACjB,MAAM;IAEN,OAAO,SAAS,IAAI,CAAC,KAAG,MAAK,WAAU;QACrC,QAAO;IACT;AACF","debugId":null}}]
}